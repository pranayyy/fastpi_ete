name: Deploy FastAPI to ECS Fargate
on:
  push:
    branches: [ master ]
env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: fastapi-blog-api
  ECS_CLUSTER: fastapi-cluster
  ECS_SERVICE: fastapi-service
  ECS_TASK_DEFINITION_FAMILY: fastapi-task
  CONTAINER_NAME: fastapi

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: aws-account
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
        echo "AWS Account ID: $AWS_ACCOUNT_ID"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Docker image to ECR
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Setup IAM roles and prerequisites
      run: |
        EXECUTION_ROLE_ARN="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
        echo "EXECUTION_ROLE_ARN=$EXECUTION_ROLE_ARN" >> $GITHUB_ENV
        
        # Create trust policy for ECS tasks
        cat > ecs-task-trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Check if execution role exists, create if it doesn't
        if ! aws iam get-role --role-name ecsTaskExecutionRole >/dev/null 2>&1; then
          echo "Creating ecsTaskExecutionRole..."
          
          # Create the execution role
          aws iam create-role \
            --role-name ecsTaskExecutionRole \
            --assume-role-policy-document file://ecs-task-trust-policy.json
          
          # Attach the managed policy
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          
          # Wait for role to be available
          echo "Waiting for IAM role to be available..."
          sleep 15
        else
          echo "ecsTaskExecutionRole already exists"
        fi
        
        # Create CloudWatch log group if it doesn't exist
        aws logs create-log-group --log-group-name /ecs/$ECS_TASK_DEFINITION_FAMILY --region $AWS_REGION 2>/dev/null || true
        
        # Create ECS cluster if it doesn't exist
        if ! aws ecs describe-clusters --clusters $ECS_CLUSTER --query 'clusters[0].clusterName' --output text 2>/dev/null | grep -q $ECS_CLUSTER; then
          echo "Creating ECS cluster..."
          aws ecs create-cluster --cluster-name $ECS_CLUSTER
        else
          echo "ECS cluster already exists"
        fi

    - name: Setup RDS Database (Optional)
      run: |
        # Only create RDS if RDS_ENABLED secret is set to 'true'
        if [ "${{ secrets.RDS_ENABLED }}" = "true" ]; then
          echo "Setting up RDS database..."
          
          # Check if RDS instance exists
          if ! aws rds describe-db-instances --db-instance-identifier fastapi-blogdb --region $AWS_REGION >/dev/null 2>&1; then
            echo "Creating RDS instance..."
            
            # Get VPC ID from one of the subnets
            VPC_ID=$(aws ec2 describe-subnets --subnet-ids $(echo "${{ secrets.SUBNET_IDS }}" | cut -d',' -f1) --query 'Subnets[0].VpcId' --output text --region $AWS_REGION)
            echo "VPC ID: $VPC_ID"
            
            # Create DB subnet group
            aws rds create-db-subnet-group \
              --db-subnet-group-name fastapi-subnet-group \
              --db-subnet-group-description "Subnet group for FastAPI RDS" \
              --subnet-ids $(echo "${{ secrets.SUBNET_IDS }}" | tr ',' ' ') \
              --region $AWS_REGION || echo "Subnet group may already exist"
            
            # Update Security Group for RDS
            aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 5432 \
              --source-group ${{ secrets.SECURITY_GROUP_ID }} \
              --region $AWS_REGION || echo "Security group rule may already exist"
            
            # Create RDS instance
            aws rds create-db-instance \
              --db-instance-identifier fastapi-blogdb \
              --db-instance-class db.t3.micro \
              --engine postgres \
              --master-username postgres \
              --master-user-password postgres \
              --allocated-storage 20 \
              --db-name blogdb \
              --db-subnet-group-name fastapi-subnet-group \
              --vpc-security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
              --no-publicly-accessible \
              --region $AWS_REGION
            
            echo "Waiting for RDS instance to be available..."
            aws rds wait db-instance-available \
              --db-instance-identifier fastapi-blogdb \
              --region $AWS_REGION
          else
            echo "RDS instance already exists"
          fi
          
          # Get RDS endpoint
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier fastapi-blogdb \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text \
            --region $AWS_REGION)
          
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "RDS Endpoint: $RDS_ENDPOINT"
        else
          echo "RDS setup skipped. Using external database."
        fi

    - name: Prepare and register task definition
      run: |
        IMAGE_URI=${{ env.IMAGE_URI }}
        EXECUTION_ROLE_ARN=${{ env.EXECUTION_ROLE_ARN }}
        
        echo "Using IMAGE_URI: $IMAGE_URI"
        echo "Using EXECUTION_ROLE_ARN: $EXECUTION_ROLE_ARN"
        
        # Determine DATABASE_URL
        if [ "${{ secrets.RDS_ENABLED }}" = "true" ] && [ -n "${{ env.RDS_ENDPOINT }}" ]; then
          DATABASE_URL="postgresql://postgres:postgres@${{ env.RDS_ENDPOINT }}:5432/blogdb"
        elif [ -n "${{ secrets.DATABASE_URL }}" ]; then
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
        else
          echo "WARNING: No database configuration found. Using default localhost."
          DATABASE_URL="postgresql://postgres:postgres@localhost:5432/blogdb"
        fi
        
        echo "Using DATABASE_URL: ${DATABASE_URL%:*}:****@${DATABASE_URL##*@}"  # Hide password in logs
        
        # Create initial task definition with database configuration
        cat > task-def.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION_FAMILY",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "$EXECUTION_ROLE_ARN",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$IMAGE_URI",
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {
                  "name": "DATABASE_URL",
                  "value": "$DATABASE_URL"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/$ECS_TASK_DEFINITION_FAMILY",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        # Register the new task definition
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        echo "Task definition ARN: $TASK_DEF_ARN"

    - name: Deploy to ECS
      run: |
        # Check if service exists
        if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceName' --output text 2>/dev/null | grep -q $ECS_SERVICE; then
          echo "Service exists, updating..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEF_ARN
        else
          echo "Service doesn't exist, creating..."
          # Check if we have required secrets for service creation
          if [ -z "${{ secrets.SUBNET_IDS }}" ] || [ -z "${{ secrets.SECURITY_GROUP_ID }}" ]; then
            echo "ERROR: SUBNET_IDS and SECURITY_GROUP_ID secrets are required for service creation"
            echo "Please add these secrets to your GitHub repository:"
            echo "- SUBNET_IDS: comma-separated list of subnet IDs"
            echo "- SECURITY_GROUP_ID: security group ID"
            exit 1
          fi
          
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
        fi

    - name: Wait for service to be stable
      run: |
        echo "Waiting for service to be stable..."
        
        # Use a simple loop to wait for service stability
        MAX_ATTEMPTS=30
        DELAY=10
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
          
          # Check service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].deployments[0].status' \
            --output text 2>/dev/null || echo "FAILED")
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].runningCount' \
            --output text 2>/dev/null || echo "0")
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")
          
          echo "Service status: $SERVICE_STATUS"
          echo "Running count: $RUNNING_COUNT, Desired count: $DESIRED_COUNT"
          
          # Check if service is stable
          if [ "$SERVICE_STATUS" = "STABLE" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" != "0" ]; then
            echo "Service is stable and running!"
            break
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Service did not stabilize within the expected time"
            echo "Final service status:"
            aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE \
              --query 'services[0]' \
              --output json
            exit 1
          fi
          
          echo "Waiting $DELAY seconds before next check..."
          sleep $DELAY
        done
        
        echo "Deployment completed successfully!"
        
        # Show final service status
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table

    - name: Get service endpoint
      run: |
        # Get the public IP or load balancer endpoint
        TASK_ARN=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --query 'taskArns[0]' \
          --output text)
        
        if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
          ENI_ID=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          
          if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
            echo "✅ Application is accessible at: http://$PUBLIC_IP:8000"
            echo "📚 API documentation: http://$PUBLIC_IP:8000/docs"
          else
            echo "⚠️  Could not determine public IP. Check ECS console for endpoint."
          fi
        else
          echo "⚠️  No running tasks found. Check ECS service status."
        fi